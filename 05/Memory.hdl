// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
 // 00 == RAM
 // 01 == RAM
 // 10 == SRN
 // 11 == KBD

 //0011 1111 1111 1111  (3FFF) highest number for the RAM16K
 //0101 1111 1111 1111  (5FFF) highest number for the RAM8K --screen
 //0110 0000 0000 0000  (6000) the only number used by 

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux4Way(in = load, sel = address[13..14], a = RAM1, b= RAM2, c = screen, d = keyboard);

    Or(a = RAM1, b = RAM2, out = ramLoad);
    RAM16K(in = in, load =ramLoad, address=address[0..13], out = RAMout);
//
//    //consturcting 8K ram from two 4K RAM 
//    DMux(in = screen, sel = address[12], a = r1, b = r2);
//
//    RAM4K(in = in, address = address[0..11], load = r1, out = ram1 );
//    RAM4K(in = in, address = address[0..11], load = r2, out = ram2 );
//
//    Mux16(a = ram1, b= ram2, sel = address[12], out = SCREENout);
//
    //---keyboard 16bit, 1 register 
    // Register(in = in, load = keyboard, out = KBDout );
    Keyboard(out = KBDout);

      
      Screen(in = in,  address = address[0..12], load = screen, out = SCREENout);

      Mux4Way16(a = RAMout, b = RAMout, c = SCREENout, d = KBDout, sel = address[13..14], out = out);
    
    

}