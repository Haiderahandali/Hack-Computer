// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //---------------------ALU-------------------//
    //PrepareALU to get D we need the instruction (from the specification) 001100
    And(a = instruction[11] , b = instruction[15], out = zx);
    And(a = instruction[10] , b = instruction[15], out = nx);
    Or (a = instruction[9]  , b = notInstruction,  out = zy);
    Or (a = instruction[8]  , b = notInstruction,  out = ny);
    And(a = instruction[7] ,  b = instruction[15],  out = f);
    And(a = instruction[6] ,  b = instruction[15],  out = no);



    ALU(x=Dregister,y=m2,no=no, f=f, ny = ny, zy = zy, nx = nx, zx = zx, out = ALUout, out = outM, ng = ng, zr = zr);



    //--------------------- A register -------------------//    
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = Ain ); // if MSB is on, select alu, otherwise select insturction
    Not(in = instruction[15],out = notInstruction);
    Or(a = notInstruction, b = instruction[5],out = loadA);//looking at the specification(ddd part), D register only on when 1xx is the instruction (super neat!)
    ARegister(in = Ain , load = loadA, out = Aregister, out[0..14] = addressM);



    //--------------------- D register -------------------//
    DRegister(in = ALUout, load = instruction[4], out = Dregister); //looking at the specification(ddd part), D register only on when x1x is the instruction (super neat!)




    //------------------- Choose current memory M (content of RAM[A]) or A itself as a constant ------------//
    Mux16(a = Aregister, b = inM, sel = instruction[12], out = m2); //looking at the specification, A is selected over the content of M when a == 1 and A when a == 0(insturction[12]) 



    //--------------- Write to M -------------------//
    And(a = true, b = instruction[3], out = selectM); //looking at the specification, M destination is selected when dd1 is the instruction
    And(a = instruction[15], b = selectM, out = writeM);


    ////--------- Doing the Jump -------------------//

    Not(in = zr, out = notzr);
    Not(in = ng, out = notng);


    Or(a = ng, b = zr, out = neg);
    Not(in = neg, out = pos);

    And(a = instruction[2], b = ng, out = j2);
    And(a = instruction[1], b = zr,  out = j1);
    And(a = instruction[0], b = pos, out = j0);

    Or(a = j0, b = j1, out = j12);
    Or(a = j12, b = j2, out = j123);
    And(a = j123, b = instruction[15], out = jmp);


    PC(inc = true, load = jmp, reset = reset, in = Aregister, out[0..14] = pc);


}